open System

/// </summary> Define types </summary>
type codeColor = Red | Green | Yellow | Purple | White | Black
type code = codeColor list
type answer = int * int
type board = (code * answer) list
type player = Human | Computer

/// <summary> Transforms user text/string input to type codeColor </summary>
let stringToColor n =
  match n with
  | ("Red"|"red"|"r") -> Red
  | ("Green"|"green"|"g") -> Green
  | ("Yellow"|"yellow"|"y") -> Yellow
  | ("Purple"|"purple"|"p") -> Purple
  | ("White"|"white"|"w") -> White
  | ("Black"|"black"|"b") -> Black
  | _ -> failwith "invalid color request try with:\nRed | Green | Yellow | Purple | White | Black"

/// <summary> Transforms user text/string input to type player </summary>
let stringToPlayer n =
 match n with
 | "Human" -> Human
 | "Computer" -> Computer
 | _ -> failwith "invalid player request try with: \nHuman | Computer"

let rec listRemove i l =
    match i, l with
    | 0, x::xs -> xs
    | i, x::xs -> x::listRemove (i - 1) xs
    | i, [] -> failwith "index out of range"

(*
let mutable codePossibilities = [Red; Green; Yellow; Purple; White; Black]
let mutable codeType = []
let mutable counter = 0
let rand = System.Random()
let mutable imax = 5
for i=1 to 4 do
    counter <- rand.Next(0, imax)
    codeType <- codePossibilities.[counter] :: codeType
    codePossibilities <- listRemove counter codePossibilities
    imax <- imax - 1

printfn "%A" codeType
*)
(*
let createCode (player : player) = 
    let mutable codePossibilities = [Red; Green; Yellow; Purple; White; Black]
    match player with
    | Human -> Console.WriteLine "Human"
            let mutable theCode = List.append [] (stringToColor (Console.ReadLine()))
            let guessTwo = stringToColor (Console.ReadLine())
            let mutable theCode = [guessOne :: guessTwo :: []]
            printfn "%A" theCode
    | Computer -> Console.WriteLine "Computer"
            let mutable counter = 0
            let rand = System.Random()
            let mutable imax = 5
            let mutable theCode = []
            for i = 1 to 4 do
                counter <- rand.Next(0, imax)
                theCode <- codePossibilities.[counter] :: theCode
                codePossibilities <- listRemove counter codePossibilities
                imax <- imax -1
printfn "HUMAND/COMPUTER" 
let (makePlayer : player) = stringToPlayer (Console.ReadLine())
createCode makePlayer 
printfn "%A" theCode
*)
(*printfn "Skriv noget"
let mutable (theCode : code) = List.append [] [stringToColor (Console.ReadLine())]
theCode <- List.append theCode [stringToColor (Console.ReadLine())]
printfn "%A" theCode
*)

let rec spis2 (number : int) (output : code) =
    printfn "Skriv nr %i" number
    let mutable output = output
    output <- List.append output [stringToColor (Console.ReadLine())]
    spis2 (number - 1) output
spis2 2 []



